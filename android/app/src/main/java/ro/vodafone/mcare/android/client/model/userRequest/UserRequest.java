/**
 * API-66 User Requests
 * Rest web service exposed by Vodafone API application and consumed by mobile device applications.
 * <p>
 * OpenAPI spec version: 9.0.7
 * <p>
 * <p>
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ro.vodafone.mcare.android.client.model.userRequest;

import android.support.annotation.NonNull;
import android.util.Log;

import com.google.gson.annotations.SerializedName;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import ro.vodafone.mcare.android.client.model.realm.system.UserRequestsLabels;

/**
 * parent object for all entities
 **/
@ApiModel(description = "parent object for all entities")
public class UserRequest implements Comparable<UserRequest>
{
    public enum Status
    {
        PENDING(0, UserRequestsLabels.getNoPendingUserRequest()),
        ACCEPTED(1, UserRequestsLabels.getNoActiveUserRequest()),
        REJECTED(2, UserRequestsLabels.getNoRejectedUserRequest());

        int value = 0;
        String emptyMessageLabel;

        Status(int value, String emptyMessageLabel) {
            this.value = value;
            this.emptyMessageLabel = emptyMessageLabel;
        }

        public int getValue() {
            return value;
        }

        public String getEmptyMessageLabel() {
            return emptyMessageLabel;
        }
    }

    private transient int status;

    @SerializedName("requestDescription")
    private String requestDescription = null;

    @SerializedName("requesterName")
    private String requesterName = null;

    @SerializedName("requestTime")
    private String requestTime = null;

    @SerializedName("processTime")
    private String processTime = null;

    private transient Date requestDateTime = null;

    @SerializedName("requestId")
    private String requestId = null;

    @SerializedName("requesterPhoneNumber")
    private String requesterPhoneNumber = null;

    @SerializedName("requesterEmail")
    private String requesterEmail = null;

    public int getStatus() {
        return status;
    }

    public void setStatus(int status) {
        this.status = status;
    }

    public void setStatus(UserRequest.Status status) {
        this.status = status.getValue();
    }

    /**
     * request description
     **/
    @ApiModelProperty(required = true, value = "request description")
    public String getRequestDescription() {
        return requestDescription;
    }

    public void setRequestDescription(String requestDescription) {
        this.requestDescription = requestDescription;
    }

    /**
     * name of the user who made the request
     **/
    @ApiModelProperty(value = "name of the user who made the request")
    public String getRequesterName() {
        return requesterName;
    }

    public void setRequesterName(String requesterName) {
        this.requesterName = requesterName;
    }

    /**
     * The moment when the request was made
     **/
    @ApiModelProperty(required = true, value = "The moment when the request was made")
    public String getRequestTime() {
        return requestTime;
    }

    public void setRequestTime(String requestTime) {
        this.requestTime = requestTime;
    }

    private void setRequestDateTime(String requestTime) {
        DateFormat formatter = new SimpleDateFormat("dd MMM yyyy", Locale.ENGLISH);
        try {
            requestDateTime = formatter.parse(requestTime);
        } catch (ParseException e) {
            Log.d("UserRequest", "setRequestTime, could not parse requestTime: " + e.getMessage());
        }
    }

    /**
     * The moment when the request was processed
     **/
    @ApiModelProperty(value = "The moment when the request was processed")
    public String getProcessTime() {
        return processTime;
    }

    public void setProcessTime(String processTime) {
        this.processTime = processTime;
    }

    /**
     * request id as in database
     **/
    @ApiModelProperty(required = true, value = "request id as in database")
    public String getRequestId() {
        return requestId;
    }

    public void setRequestId(String requestId) {
        this.requestId = requestId;
    }

    /**
     * Phoone number of the user who made the request
     **/
    @ApiModelProperty(required = true, value = "Phoone number of the user who made the request")
    public String getRequesterPhoneNumber() {
        return requesterPhoneNumber;
    }

    public void setRequesterPhoneNumber(String requesterPhoneNumber) {
        this.requesterPhoneNumber = requesterPhoneNumber;
    }

    /**
     * Email of the user who made the request
     **/
    @ApiModelProperty(required = true, value = "Email of the user who made the request")
    public String getRequesterEmail() {
        return requesterEmail;
    }

    public void setRequesterEmail(String requesterEmail) {
        this.requesterEmail = requesterEmail;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UserRequest userRequest = (UserRequest) o;
        return this.requestId == null ? userRequest.requestId == null : this.requestId.equals(userRequest.requestId);
//    return (this.requestDescription == null ? userRequest.requestDescription == null : this.requestDescription.equals(userRequest.requestDescription)) &&
//        (this.requesterName == null ? userRequest.requesterName == null : this.requesterName.equals(userRequest.requesterName)) &&
//        (this.requestTime == null ? userRequest.requestTime == null : this.requestTime.equals(userRequest.requestTime)) &&
//        (this.processTime == null ? userRequest.processTime == null : this.processTime.equals(userRequest.processTime)) &&
//        (this.requestId == null ? userRequest.requestId == null : this.requestId.equals(userRequest.requestId)) &&
//        (this.requesterPhoneNumber == null ? userRequest.requesterPhoneNumber == null : this.requesterPhoneNumber.equals(userRequest.requesterPhoneNumber)) &&
//        (this.requesterEmail == null ? userRequest.requesterEmail == null : this.requesterEmail.equals(userRequest.requesterEmail));
    }

    @Override
    public int compareTo(@NonNull UserRequest rhs)
    {
        if (requestDateTime == null)
            setRequestDateTime(requestTime);

        if (rhs.requestDateTime == null)
            rhs.setRequestDateTime(rhs.getRequestTime());

        if (requestDateTime != null)
            return requestDateTime.compareTo(rhs.requestDateTime);

        return 0;
    }

    @Override
    public int hashCode() {
        int result = 17;
        result = 31 * result + (this.requestDescription == null ? 0 : this.requestDescription.hashCode());
        result = 31 * result + (this.requesterName == null ? 0 : this.requesterName.hashCode());
        result = 31 * result + (this.requestTime == null ? 0 : this.requestTime.hashCode());
        result = 31 * result + (this.processTime == null ? 0 : this.processTime.hashCode());
        result = 31 * result + (this.requestId == null ? 0 : this.requestId.hashCode());
        result = 31 * result + (this.requesterPhoneNumber == null ? 0 : this.requesterPhoneNumber.hashCode());
        result = 31 * result + (this.requesterEmail == null ? 0 : this.requesterEmail.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class UserRequest_ {\n");

        sb.append("  requestDescription: ").append(requestDescription).append("\n");
        sb.append("  requesterName: ").append(requesterName).append("\n");
        sb.append("  requestTime: ").append(requestTime).append("\n");
        sb.append("  processTime: ").append(processTime).append("\n");
        sb.append("  requestId: ").append(requestId).append("\n");
        sb.append("  requesterPhoneNumber: ").append(requesterPhoneNumber).append("\n");
        sb.append("  requesterEmail: ").append(requesterEmail).append("\n");
        sb.append("}\n");
        return sb.toString();
    }
}
